@inject GameState GameState
@implements IDisposable


<div style="position:relative">
    <button class="btn btn-primary" onclick="@(new Action(() => Return()))">Return for air</button>
</div>
<div>
    Air
    <div class="progress" style="width:300px;">
        <div class="progress-bar" style="@GetAirProgress()"></div>
    </div>
</div>
@if (IsCorralling == false)
{
    <div style="position:relative">
        <button class="btn btn-primary" onclick="@(new Action(() => CorralFish()))">Chase Fish</button>
    </div>
}
else
{
    <div style="position:relative">
        <button class="btn btn-primary" onclick="@(new Action(() => StopCorralling()))">Stop Chasing Fish</button>
    </div>
}

@if (availableFish > 0)
{
    if (Player.Instance.HasToolRequirement("Trident Hunting"))
    {
        <div style="position:relative">
            <button class="btn btn-primary" onclick="@(new Action(() => GatherFish()))">Gather Fish</button>
        </div>
    }
    else
    {
        <div style="position:relative">
            <button class="btn btn-primary" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You need some kind of trident to catch these fish.")))"
             @onmouseout="@(new Action(() => GameState.HideTooltip()))" >Gather Fish</button>
        </div>
    }

}
else
{
    <div style="position:relative">
        <button class="btn btn-primary" style="opacity:0.5" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You need to corral fish first!")))"
                @onmouseout="@(new Action(() => GameState.HideTooltip()))">
            Gather Fish
        </button>
    </div>
}





@code {
    private string gatherText = "";
    private string tooltip = "";
    private string beginText = "";
    private Random rand = new Random();
    private int LastGameTick;
    private int availableFish;
    private int caughtFish;
    private int air;
    private bool IsCorralling;
    private bool IsGathering;

    public void CorralFish()
    {
        FinishGameTick = GameState.CurrentTick + GameState.Random.Next(10, 25);
        IsCorralling = true;
        MessageManager.AddMessage("You start corralling the fish.");
        GameState.UpdateState();
    }
    public void StopCorralling()
    {
        IsCorralling = false;
        GameState.UpdateState();
    }
    public void ReturnForAir()
    {
        air = 100;
        IsCorralling = false;
        IsGathering = false;
    }
    public void GatherFish()
    {
        FinishGameTick = GameState.CurrentTick + GameState.Random.Next(10, 25);
        IsCorralling = false;
        IsGathering = true;
        MessageManager.AddMessage("You start chasing the fish, hoping to catch some.");
        GameState.UpdateState();
    }
    public void GatherItem(GameItem i)
    {
        if (i == null)
        {
            Console.WriteLine("Item was null");
            GameState.CurrentGatherItem = null;
            GameState.UpdateState();
            return;
        }
        if (beginText != "")
        {
            MessageManager.AddMessage(beginText);
        }
        GameState.CurrentGatherItem = i;
        GameState.TicksToNextAction = GameState.CurrentGatherItem.GatherSpeed.ToGaussianRandom();
        GameState.UpdateState();
    }
    private GameItem GetRandomItem()
    {
        GameState.PossibleGatherItems.Clear();
        foreach (GameItem i in items)
        {
            if (i.HasRequirements())
            {
                GameState.PossibleGatherItems.Add(i);
            }
        }
        if (GameState.PossibleGatherItems.Count == 0)
        {
            return items[0];
        }
        return GameState.PossibleGatherItems[rand.Next(0, GameState.PossibleGatherItems.Count - 1)];
    }
    private bool CanGatherAny()
    {
        foreach (GameItem item in items)
        {
            if (item.HasRequirements())
            {
                return true;
            }
        }
        return false;
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }

    private string GetProgress()
    {
        int ticks = GameState.CurrentTick - (FinishGameTick - 20);
        return "width:" + (100 - ((double)ticks / 20) * 100d) + "%";
    }
    private string GetAirProgress()
    {
        int ticks = GameState.CurrentTick - (HoleCloseTick - 200);
        return "width:" + (100 - ((double)ticks / 200) * 100d) + "%";
    }
    public string GetLowestReqTooltip()
    {
        if (items != null)
        {
            GameItem lowest = items[0];
            int lowestReq = int.MaxValue;
            foreach (GameItem i in items)
            {
                foreach (Requirement r in i.Requirements)
                {
                    if (r.Skill != "None")
                    {
                        if (r.SkillLevel < lowestReq)
                        {
                            lowest = i;
                        }
                        lowestReq = Math.Min(r.SkillLevel, lowestReq);

                    }
                }
            }
            return lowest.GetRequirementTooltip();

        }
        return "";
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e)
    {
        if (IsCorralling && FinishGameTick <= GameState.CurrentTick)
        {
            MessageManager.AddMessage("You corral some more fish.");
            availableFish += GameState.Random(1, 5);
        }
        else if (IsGathering && FinishGameTick <= GameState.CurrentTick)
        {
            MessageManager.AddMessage("You stab your trident and catch some fish.");
            caughtFish += GameState.Random(1, 5);
        }
        if (LastGameTick != GameState.CurrentTick)
        {
            LastGameTick = GameState.CurrentTick;
            air--;
            if (air < 25)
            {
                MessageManager.AddMessage("You are running out of air!", "red");
            }
            if (air <= 0)
            {
                MessageManager.AddMessage("You run out of air, suffocate, and die.", "red");
                Player.Instance.Die();
            }
        }
        StateHasChanged();
    }
}
