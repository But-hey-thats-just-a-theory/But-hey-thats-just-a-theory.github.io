@page "/World/SawokaVault"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable

<div>
    <h1>Vault</h1>

    <p>Safes line the walls of the room. They come in various sizes and colors.</p>

    @if (Player.Instance.Inventory.HasItem("Small Red Library Key") || Player.Instance.Inventory.HasItem("Small Orange Library Key") || Player.Instance.Inventory.HasItem("Small Green Library Key"))
    {
        <div>
            <button class="btn btn-primary" @onclick="@(() => SearchForSafe())">
                Find a safe
            </button>
        </div>
        @if (GameState.TicksToNextAction <= 0 && IsSearching)
        {
            <div>
                <button class="btn btn-primary" @onclick="@(() => UnlockSafe())">
                    Unlock Safe
                </button>
            </div>
        }
        else if (IsSearching)
        {
            <div>
                <button class="btn btn-primary" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You need to find the safe first.")))"
                    @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    Unlock Safe
                </button>
            </div>
        }

    }
    else
    {
        <div>
            <button class="btn btn-primary" style="opacity:0.5" @onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You don't have any keys.")))"
                    @onmouseout="@(new Action(() => GameState.HideTooltip()))">
                Find a safe
            </button>
        </div>
    }
</div>




@code {

    private bool IsSearching;

    private void SearchForSafe()
    {
        MessageManager.AddMessage("You walk around the room with a key in your hand. It begins to vibrate as you get nearer its partner safe.");
        GameState.TicksToNextAction = 50;
    }
    private void UnlockSafe()
    {
        IsSearching = false;
        Drop d = ItemManager.Instance.GetMinigameDropTable("Sawoka Vault").DropTable.GetDrop();
        Player.Instance.Inventory.AddDrop(d);
        MessageManager.AddMessage("You insert the key into the safe and it disolves. You open the door to find " + d.ItemName);

    }
    private string GetProgress()
    {
        @if (IsSearching)
        {
            return "width:" + (100 - ((double)GameState.TicksToNextAction / 50d) * 100d) + "%";
        }
        return "width:0%";
    }
    protected override void OnInitialized()
    {
        if(NPCManager.Instance.GetNPCByName("Wakanidsko").ConversationDepth == 7)
        {
            MessageManager.AddMessage("The wizard brings the world to darkness and you find your eyes are closed. When you open them you are in the safe room he mentioned. Somehow you never noticed it was just through at the other end of the library. Was the door always there?");
        }
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
