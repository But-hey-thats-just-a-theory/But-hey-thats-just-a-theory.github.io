@page "/World/OldBank/"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable

@if (GameState.CurrentGameMode != GameState.GameType.Ultimate)
{
    <div style="overflow-y:hidden;height:100%;">


        <div style="margin-bottom:35px;">
            Quantity:
            <div>
                <button class="btn btn-primary" style="@GetButtonStyle(1)" @onclick="@(() => UpdateBankAmount(1))">1</button>
                <button class="btn btn-primary" style="@GetButtonStyle(5)" @onclick="@(() => UpdateBankAmount(5))">5</button>
                <button class="btn btn-primary" style="@GetButtonStyle(10)" @onclick="@(() => UpdateBankAmount(10))">10</button>
                <button class="btn btn-primary" style="@GetButtonStyle(-1)" @onclick="@(() => showInput = !showInput)">x</button>
                <button class="btn btn-primary" style="@GetButtonStyle(int.MaxValue)" @onclick="@(() => UpdateBankAmount(int.MaxValue))">All</button>
            </div>
            <div style="margin-top:5px;">
                @if (showInput)
                {
                    <input type="number" @bind-value="Bank.Instance.Amount" />
                }
                else
                {
                    <div style="height:30px;"></div>
                }
            </div>

            <div style="float: right; margin-top: -75px;position:relative;">
                <button style="float: right;" class="btn btn-primary" @onclick="@(() => ToggleSearch())">Search</button>
                <div style=" margin-right: 85px; margin-top: 4px;">
                    @if (showSearch)
                    {
                        <input style="width:150px;margin-left:40px;" type="text" @bind="searchString" @bind:event="oninput" />
                        <div style="margin-top:-30px;">
                            <button class="btn btn-primary" style="width:30px;height:30px;padding:0px;" @onclick="@(() => ClearSearch())">X</button>
                        </div>
                    }
                    else
                    {
                        <div style="height:30px;"></div>
                    }
                </div>

            </div>
            <div>
                <button style="float: right; margin-top: -28px;" class="btn btn-primary" @onclick="@(() => DepositAll())">Deposit All</button>
            </div>
        </div>
        <div style="display:flex;flex-wrap:wrap;">
            @foreach (string tab in Bank.Instance.Tabs)
            {
                @if (Bank.Instance.CurrentTab == tab)
                {
                    <div>
                        <button style="margin:3px; background-color:gray;border-color:lightgray" class="btn btn-primary">@tab</button>
                    </div>
                }
                else
                {
                    <div>
                        <button style="margin:3px;" class="btn btn-primary" @onclick="@(() => SetTab(tab))">@tab</button>
                    </div>
                }
            }
            <div style="display:flex;">

                @if (showTabInput)
                {
                    <button class="btn btn-primary" style="width:30px;height:30px;padding:0px;margin:3px;" @onclick="@(() => ToggleTabInput())">X</button>
                    <input style="width:150px;margin:3px;" type="text" @bind="newTabString" />
                    <button style="margin: 3px;" class="btn btn-primary" @onclick="@(() => AddTab(newTabString))">Confirm</button>

                }
                else
                {
                    <button style="margin: 3px;" class="btn btn-primary" @onclick="@(() => ToggleTabInput())">Add Tab</button>
                }
                @if (Bank.Instance.CurrentTab != "Main")
                {
                    @if (addingTags)
                    {
                        <button style="margin:3px;" class="btn btn-primary" @onclick="@(() => ToggleAddingTags())">End Adding Items</button>

                    }
                    else
                    {
                        <button style="margin: 3px;" class="btn btn-primary" @onclick="@(() => ToggleAddingTags())">Add Items to Tab</button>

                    }
                }
            </div>
        </div>


        <div style="display:flex;flex-wrap:wrap;height:500px;overflow-y:auto;align-content: flex-start;" class="bank-scroll">
            @if (searchString == "" && Bank.Instance.CurrentTab == "Main" && !addingTags)
            {
                @foreach (KeyValuePair<GameItem, int> item in GetBankItems())
                {
                    if (item.Key != null)
                    {
                        <div oncontextmenu="return false;"
                             onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, item.Key)))"
                             @onclick="@(() => Withdraw(item.Key))" style="margin-left:-3px;cursor:pointer">
                            <Quepland_2.Components.ItemBoxComponent Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                        </div>
                    }



                }
                @for (int i = 0; i < GetEmptyItemsToFillRow(); i++)
                {
                    int temp = i;
                    if (temp % itemsPerRow == 0)
                    {
                        <br />
                    }
                    <div style="margin-left:-3px;">
                        <Quepland_2.Components.ItemBoxComponent></Quepland_2.Components.ItemBoxComponent>

                    </div>
                }
            }
            else if (addingTags)
            {
                if (searchString == "")
                {
                    @foreach (KeyValuePair<GameItem, int> item in GetBankItems())
                    {
                        if (item.Key.Tabs.Contains(Bank.Instance.CurrentTab) == false)
                        {
                            <div oncontextmenu="return false;"
                                 @onclick="@(() => AddTagToItem(item.Key))" style="margin-left:-3px;cursor:pointer;opacity:0.5">
                                <Quepland_2.Components.ItemBoxComponent @key="item" Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" HideTooltip="true" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                            </div>
                        }
                        else
                        {

                            <div oncontextmenu="return false;"
                                 @onclick="@(() => RemoveTagFromItem(item.Key))" style="margin-left:-3px;cursor:pointer">
                                <Quepland_2.Components.ItemBoxComponent @key="item" Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" HideTooltip="true" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                            </div>

                        }

                    }
                }
                else
                {
                    @foreach (KeyValuePair<GameItem, int> item in GetSearchItems())
                    {
                        if (item.Key.Tabs.Contains(Bank.Instance.CurrentTab) == false)
                        {

                            <div oncontextmenu="return false;"
                                 @onclick="@(() => AddTagToItem(item.Key))" style="margin-left:-3px;cursor:pointer;opacity:0.5">
                                <Quepland_2.Components.ItemBoxComponent @key="item" Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" HideTooltip="true" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                            </div>

                        }
                        else
                        {

                            <div oncontextmenu="return false;"
                                 @onclick="@(() => RemoveTagFromItem(item.Key))" style="margin-left:-3px;cursor:pointer">
                                <Quepland_2.Components.ItemBoxComponent @key="item" Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" HideTooltip="true" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                            </div>

                        }

                    }
                }
            }
            else if (searchString == "")
            {
                @foreach (KeyValuePair<GameItem, int> item in GetItemsForTab(Bank.Instance.CurrentTab))
                {

                    <div oncontextmenu="return false;"
                         onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, item.Key)))"
                         @onclick="@(() => Withdraw(item.Key))" style="margin-left:-3px;cursor:pointer">
                        <Quepland_2.Components.ItemBoxComponent Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                    </div>


                }
            }
            else
            {
                @foreach (KeyValuePair<GameItem, int> item in GetSearchItems())
                {

                    <div  oncontextmenu="return false;"
                             onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, item.Key)))"
                         @onclick="@(() => Withdraw(item.Key))" style="margin-left:-3px;cursor:pointer">
                        <Quepland_2.Components.ItemBoxComponent Item="@item.Key" ShowAmount="@true" Inventory="@Bank.Instance.Inventory" shouldRender="@item.Key.Rerender"></Quepland_2.Components.ItemBoxComponent>

                    </div>

                }
            }
        </div>
    </div>
}
else
{
    <div>This is where you would put your bank... if you had one!</div>
    @if (NPCManager.Instance.GetNPCByName("Tuto").AvailableDialogCount() > 0)
    {
        <Quepland_2.Components.NPCDialogComponent npc="Tuto"></Quepland_2.Components.NPCDialogComponent>
    }
}
@code {

    private bool showInput;
    private bool showSearch;
    private bool showTabInput;
    int itemsPerRow = 10;
    private string searchString = "";
    private string newTabString = "";
    private bool addingTags;
    private bool rerender = true;

    public IOrderedEnumerable<KeyValuePair<GameItem, int>> GetBankItems()
    {
        return Bank.Instance.Inventory.GetItems().OrderBy(x => x.Key.ID);
    }

    public IOrderedEnumerable<KeyValuePair<GameItem, int>> GetSearchItems()
    {
        IOrderedEnumerable<KeyValuePair<GameItem, int>> items = Bank.Instance.Inventory.GetItems().Where(y => y.Key.Name.ToLower().Contains(searchString.ToLower())).OrderBy(x => x.Key.ID);
        foreach (KeyValuePair<GameItem, int> item in items)
        {
            item.Key.Rerender = true;
        }
        return items;
    }
    public IOrderedEnumerable<KeyValuePair<GameItem, int>> GetItemsForTab(string tab)
    {
        IOrderedEnumerable<KeyValuePair<GameItem, int>> items = Bank.Instance.Inventory.GetItems().Where(y => y.Key.Tabs.Contains(tab)).OrderBy(x => x.Key.ID);
        foreach (KeyValuePair<GameItem, int> item in items)
        {
            item.Key.Rerender = true;
        }
        return items;
    }
    private void ToggleSearch()
    {
        showSearch = !showSearch;
    }

    public void ClearSearch()
    {
        searchString = "";
        GameState.UpdateState();
    }
    public void AddTab(string tab)
    {
        if (Bank.Instance.Tabs.Contains(tab) == false)
        {
            Bank.Instance.Tabs.Add(tab);
            ToggleTabInput();
            GameState.UpdateState();
        }

    }
    public void AddTagToItem(GameItem i)
    {
        i.Tabs.Add(Bank.Instance.CurrentTab);
        i.Rerender = true;
        GameState.UpdateState();
    }
    public void RemoveTagFromItem(GameItem i)
    {
        i.Tabs.Remove(Bank.Instance.CurrentTab);
        i.Rerender = true;
        GameState.UpdateState();
    }
    public void SetTab(string tab)
    {
        Bank.Instance.CurrentTab = tab;
        GameState.UpdateState();
    }
    public void ToggleTabInput()
    {
        showTabInput = !showTabInput;
        GameState.UpdateState();
    }
    public void ToggleAddingTags()
    {
        addingTags = !addingTags;
        GameState.UpdateState();
    }
    public void DeleteTab(string tab)
    {
        Bank.Instance.Tabs.Remove(tab); GameState.UpdateState();
    }
    public void RenameTab(string tab, string newName)
    {
        foreach (KeyValuePair<GameItem, int> pair in Bank.Instance.Inventory.GetItems())
        {
            if (pair.Key.Tabs.Contains(tab))
            {
                pair.Key.Tabs.Remove(tab);
                pair.Key.Tabs.Add(newName);
            }
        }
        GameState.UpdateState();
    }
    private int GetEmptyItemsToFillRow()
    {
        return itemsPerRow - (Bank.Instance.Inventory.GetItems().Count % itemsPerRow);
    }
    private void Withdraw(GameItem item)
    {
        Bank.Instance.Withdraw(item);
        GameState.UpdateState();
    }
    private void Withdraw(GameItem item, int amount)
    {
        Bank.Instance.Withdraw(item, amount);
        GameState.UpdateState();
    }
    public void ShowMenu(MouseEventArgs args, GameItem item)
    {
        if (args.Button == 2)
        {
            GameState.CurrentContextMenu = new ContextMenu();
            if (Bank.Instance.IsBanking)
            {
                GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Withdraw " + Bank.Instance.Amount + " " + item, new Action(() => Withdraw(item))));
                if (Bank.Instance.Amount != 1)
                {
                    GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Withdraw 1 " + item, new Action(() => Withdraw(item, 1))));
                }
                if (Bank.Instance.Amount != 5)
                {
                    GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Withdraw 5 " + item, new Action(() => Withdraw(item, 5))));
                }
                if (Bank.Instance.Amount != 10)
                {
                    GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Withdraw 10 " + item, new Action(() => Withdraw(item, 10))));
                }
                if (Bank.Instance.Amount != int.MaxValue)
                {
                    GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Withdraw All " + item, new Action(() => Withdraw(item, int.MaxValue))));
                }

            }

            GameState.ShowContextMenu(args);
        }
    }
    public void DepositAll()
    {
        Bank.Instance.DepositAll(Player.Instance.Inventory);
        if (GameState.inventoryViewer.SelectedItem != null &&
            Player.Instance.Inventory.GetNumberOfItem(GameState.inventoryViewer.SelectedItem) == 0)
        {
            GameState.inventoryViewer.SelectedItem = null;
            GameState.itemViewer.ClearItem();
        }
        GameState.UpdateState();

    }
    private string GetButtonStyle(int amount)
    {
        if (Bank.Instance.Amount == amount)
        {
            return "cursor:normal; background-color:gray;border-color:lightgray";
        }
        else if (amount == -1 && Bank.Instance.Amount != 1 && Bank.Instance.Amount != 5 && Bank.Instance.Amount != 10 && Bank.Instance.Amount != int.MaxValue)
        {
            return "cursor:normal; background-color:gray;border-color:lightgray";
        }
        else
        {
            return "cursor:pointer;";
        }
    }
    private void UpdateBankAmount(int newAmount)
    {
        Bank.Instance.Amount = newAmount;
        showInput = false;
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        Bank.Instance.IsBanking = true;
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        Bank.Instance.IsBanking = false;
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
