@inject GameState GameState
@implements IDisposable
@inject NavigationManager UriHelper

@if (TripInfo != null)
{
    if (TripInfo.IsActive)
    {
        @if (TripInfo.ReturnTime.CompareTo(DateTime.UtcNow) <= 0)
        {
            <div>You completed your hunt.</div>
            <button class="btn btn-primary" @onclick="@(() => EndHunt(TripInfo.ReturnTime.Subtract(TripInfo.StartTime).TotalSeconds))">Complete Hunt</button>
        }
        else
        {
            <div>Hunting... @(TripInfo.ReturnTime.Subtract(DateTime.UtcNow).ToString(@"hh\:mm\:ss"))</div>
            <button class="btn btn-primary" @onclick="@(() => CancelHuntingTrip())">Cancel Hunt</button>
        }

    }
    else
    {
        if (huntingMenu == "Unopened")
        {
            <button class="btn btn-primary" @onclick="@(() => OpenMenu())">Go Hunting</button>
        }
        else if (huntingMenu == "Opened")
        {
            <button class="btn btn-primary" @onclick="@(() => StartHuntingTrip(1))">1 Hour</button>
            <button class="btn btn-primary" @onclick="@(() => StartHuntingTrip(4))">4 Hours</button>
            <button class="btn btn-primary" @onclick="@(() => StartHuntingTrip(8))">8 Hours</button>
        }

    }
}


@code {

    [Parameter]
    public HuntingTripInfo TripInfo { get; set; }
    [Parameter]
    public Area area { get; set; }
    private string huntingMenu = "Unopened";

    public void StartHuntingTrip(int hours)
    {
        TripInfo.IsActive = true;
        TripInfo.StartTime = DateTime.UtcNow;
        TripInfo.ReturnTime = DateTime.UtcNow.AddHours(hours);
        GameState.IsOnHuntingTrip = true;
    }
    public void CancelHuntingTrip()
    {
        double amountCompleted = DateTime.UtcNow.Subtract(TripInfo.StartTime).TotalHours / TripInfo.ReturnTime.Subtract(TripInfo.StartTime).TotalHours;
        EndHunt(amountCompleted * TripInfo.ReturnTime.Subtract(TripInfo.StartTime).TotalSeconds);
    }

    public void EndHunt(double totalTimeHunting, bool useFloor)
    {
        double caughtBase = totalTimeHunting * (1 / 3600d) * (double)((Player.Instance.GetLevel("Hunting") + 4) / 4d);
        double caught = caughtBase.ToGaussianRandom();
        int catchFloor = 0;
        if (useFloor)
        {
            catchFloor = ((Player.Instance.GetLevel("Archery") / 10) + 1) * Math.Max((int)(totalTimeHunting / 3600), 1);
        }
        if (caught < catchFloor)
        {
            caught = catchFloor;
        }

        for (int i = 0; i < caught; i++)
        {
            Drop d = TripInfo.DropTable.GetDrop();
            if (ItemManager.Instance.GetItemByName(d.ItemName).HasRequirements())
            {
                Player.Instance.Inventory.AddDrop(d);
                Player.Instance.GainExperience(ItemManager.Instance.GetItemByName(d.ItemName).ExperienceGained);
                MessageManager.AddMessage("You hunted a " + d + " on your trip.");
            }
            else
            {
                MessageManager.AddMessage("You hunted a " + d + " on your trip, but it got away.");
            }
        }
        Console.WriteLine("Caught Base:" + caughtBase);
        Console.WriteLine("Total Time Hunting:" + totalTimeHunting);
        Console.WriteLine("Catch Floor:" + catchFloor);
        TripInfo.IsActive = false;
        TripInfo.StartTime = DateTime.MinValue;
        TripInfo.ReturnTime = DateTime.MinValue;
        GameState.IsOnHuntingTrip = false;
        GameState.UpdateState();
    }
    private void OpenMenu()
    {
        huntingMenu = "Opened";
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
        TripInfo.Area = area;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
