@inject GameState GameState
@implements IDisposable

<ItemViewerComponent Item="@SelectedItem"></ItemViewerComponent>
@if (Bank.Instance.IsBanking)
{
    <div onclick="@(new Action<MouseEventArgs>((args) => BankItem(SelectedItem, -1)))">Deposit</div>

}
<div style="display:flex;flex-wrap:wrap;border:solid black 1px;padding:8px;margin:5px;border-radius:0.25rem">
    @foreach (GameItem item in Player.Instance.Inventory.GetItems().Keys.OrderBy(x => x.ID))
    {
        if (item != null)
        {
            if (item.IsStackable)
            {
                <div oncontextmenu="return false;" 
                     onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, item)))" 
                     onclick="@(new Action<MouseEventArgs>((args) => SelectItem(args, item, 0)))"><ItemBoxComponent Item="@item" ShowAmount="@true" IsSelected="@(SelectedItem == item)"></ItemBoxComponent></div>

            }
            else
            {
                for (int i = 0; i < Player.Instance.Inventory.GetNumberOfItem(item); i++)
                {
                    int temp = i;
                    <div  oncontextmenu="return false;" 
                         onmouseup="@(new Action<MouseEventArgs>((args) => ShowMenu(args, item)))"
                         onclick="@(new Action<MouseEventArgs>((args) => SelectItem(args, item, temp)))"><ItemBoxComponent Item="@item" ShowAmount="@false" IsSelected="@(selectedItemID == temp && SelectedItem == item)"></ItemBoxComponent></div>
                }
            }

        }
    }
    @for (int i = 0; i < Player.Instance.Inventory.GetSize() - Player.Instance.Inventory.GetUsedSpaces(); i++)
    {
        <ItemBoxComponent Item="@null"></ItemBoxComponent>
    }
</div>
@if (Player.Instance.CurrentFollower != null)
{
    <div style="margin-left:5px;">

        @if (Player.Instance.CurrentFollower.IsBanking)
        {
            <div style="margin-left:5px;">@Player.Instance.CurrentFollower.Name Banking...</div>
            <div class="progress" style="height:15px;margin-right:5px;">
                <div class="progress-bar" style="width:@((((double)Player.Instance.CurrentFollower.TicksToNextAction / Player.Instance.CurrentFollower.AutoCollectSpeed) * 100d))%">

                </div>
            </div>
        }
        else if (Player.Instance.CurrentFollower.MeetsRequirements(GameState.CurrentGatherItem))
        {
            <div style="margin-left:5px;">@Player.Instance.CurrentFollower.Name Gathering...</div>
            <div class="progress" style="height:15px;margin-right:5px;">
                <div class="progress-bar" style="width:@(100 -(((double)Player.Instance.CurrentFollower.Inventory.GetAvailableSpaces() / Player.Instance.CurrentFollower.InventorySize) * 100d))%">

                </div>
            </div>
        }
        else if (GameState.CurrentGatherItem != null && Player.Instance.CurrentFollower.MeetsRequirements(GameState.CurrentGatherItem) == false)
        {
            <div style="margin-left:5px;">@Player.Instance.CurrentFollower.Name Cannot Gather</div>
        }
        else
        {
            <div style="margin-left:5px;">@Player.Instance.CurrentFollower.Name Following...</div>
        }
    </div>
    <div style="display:flex;flex-wrap:wrap;border:solid black 1px;padding:8px;margin:5px;border-radius:0.25rem">
        @if (Player.Instance.CurrentFollower != null)
        {
            @foreach (GameItem item in Player.Instance.CurrentFollower.Inventory.GetItems().Keys.OrderBy(x => x.ID))
            {
                if (item != null)
                {
                    <ItemBoxComponent Item="@item" ShowAmount="@true" Inventory="@Player.Instance.CurrentFollower.Inventory"></ItemBoxComponent>
                }
            }
            @for (int i = 0; i < Player.Instance.CurrentFollower.Inventory.GetSize() - Player.Instance.CurrentFollower.Inventory.GetItems().Keys.Count; i++)
            {
                <ItemBoxComponent Item="@null"></ItemBoxComponent>
            }
        }
    </div>
}


@code {

    private int selectedItemID = -1;
    private GameItem SelectedItem;
    [Parameter]
    public string CustomAction { get; set; }

    private void BankItem(GameItem item, int pos)
    {
        Bank.Instance.Deposit(item);
        if (item == SelectedItem)
        {
            if (pos < selectedItemID)
            {
                selectedItemID--;
            }

            if (Player.Instance.Inventory.GetNumberOfItem(item) == 0)
            {
                SelectedItem = null;
            }
        }
        GameState.UpdateState();
    }
    private void SelectItem(MouseEventArgs args, GameItem item, int pos)
    {
        GameState.itemViewer.ShowItem();
        if (CustomAction == "Bank" && !args.ShiftKey)
        {
            BankItem(item, pos);
        }
        else if(CustomAction == "Equip" && !args.ShiftKey)
        {
            Player.Instance.Equip(item);
        }
        else
        {
            selectedItemID = pos;
            SelectedItem = item;
        }
        GameState.UpdateState();
    }
    public void DeselectItem()
    {
        selectedItemID = -1;
        SelectedItem = null;
        GameState.UpdateState();
    }
    public void ShowMenu(MouseEventArgs args, GameItem item)
    {
        if(args.Button == 2)
        {
            GameState.CurrentContextMenu = new ContextMenu();
            if (Bank.Instance.IsBanking)
            {
                GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Deposit " + Bank.Instance.Amount + " " + item, new Action(() => Bank.Instance.Deposit(item))));

            }
            if(item.EquipSlot != "None")
            {
                if (item.IsEquipped)
                {
                    GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Unequip " + item, new Action(() => Player.Instance.UnequipItem(item))));
                }
                else
                {
                    GameState.CurrentContextMenu.Buttons.Add(new ContextButton("Equip " + item, new Action(() => Player.Instance.Equip(item))));
                }
            }
            GameState.ShowContextMenu(args);
        }
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}

