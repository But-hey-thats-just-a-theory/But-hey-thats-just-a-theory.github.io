@inject GameState GameState
@implements IDisposable

<ItemViewerComponent Item="@SelectedItem"></ItemViewerComponent>
<div style="display:flex;flex-wrap:wrap;border:solid black 1px;padding:5px;margin:5px;">
    @foreach(GameItem item in Player.Instance.Inventory.GetItems().Keys)
    {
        <div onclick="@(new Action(() => SelectItem(item)))"><ItemBoxComponent Item="@item"></ItemBoxComponent></div>
        
    }
    @for (int i = 0; i < Player.Instance.Inventory.GetSize() - Player.Instance.Inventory.GetItems().Keys.Count; i++)
    {
        <ItemBoxComponent Item="@null"></ItemBoxComponent>
    }
    <div>Slots Used:@Player.Instance.Inventory.GetTotalNumberOfItems() / @Player.Instance.Inventory.GetSize()</div>
</div>

@code {

    private GameItem SelectedItem;

    private void SelectItem(GameItem item)
    {
        SelectedItem = item;
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}

