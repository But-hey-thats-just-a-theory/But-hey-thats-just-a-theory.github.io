@inject GameState GameState
@implements IDisposable
@if (item != null)
{
    @if (GameState.CurrentGatherItem == item)
    {
        <div style="position:relative">
            <button onclick="@(new Action(() => GatherItem(null)))">Stop Gathering</button>
        </div>
    }
    else
    {
        if (item.HasRequirements())
        {
            <div style="position:relative">
                <button onclick="@(new Action(() => GatherItem(item)))">@gatherText</button>
            </div>
        }
        else
        {
            <div style="position:relative" onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, item.GetRequirementTooltip())))"
                 onmouseout="@(new Action(() => GameState.HideTooltip()))">
                <button class="action-btn" disabled>
                    @gatherText
                </button>
                <div style="position:absolute;top:0px;bottom:0px;left:0px;right:0px;"></div>
            </div>

        }

    }
}

@code {
    [Parameter]
    public string ActionText { get; set; }
    private GameItem item;
    private string gatherText = "";
    private string tooltip = "";

    public void GatherItem(GameItem i)
    {
        if (i == null)
        {
            GameState.CurrentGatherItem = null;
            GameState.UpdateState();
            return;
        }

        GameState.CurrentGatherItem = i;
        GameState.TicksToNextAction = GameState.CurrentGatherItem.GatherSpeed.ToGaussianRandom();
        GameState.UpdateState();
    }

    protected override void OnInitialized()
    {

        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        if(ActionText == null || ActionText.Contains(':') == false)
        {
            Console.WriteLine("Action Text was null or contained no colon.");
            if(ActionText == null)
            {
                Console.WriteLine("ActionText null:" + (ActionText == null));
            }
            else
            {
                Console.WriteLine("ActionText:" + ActionText);
            }

        }
        else
        {
            item = ItemManager.Instance.GetItemByName(ActionText.Split(':')[1]);
            gatherText = ActionText.Split(':')[0];
        }

        GameState.UpdateState();
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
