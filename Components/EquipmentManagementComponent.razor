@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable

    <div style="display:flex;flex-direction:column;flex-flow:wrap;">
        @foreach (string slot in ItemManager.Instance.EquipmentSlots)
        {
        <div style="width:70px;">
            @slot

            <div @onclick="@(() => Unequip(GetItemAtSlot(slot)))">
                <Quepland_2.Components.ItemBoxComponent Item="@GetItemAtSlot(slot)" shouldRender="@ShouldRerender(slot)"></Quepland_2.Components.ItemBoxComponent>
            </div>
        </div>
        }
    <div style="height:60vh;display:flex;flex-direction:column;">
        <Quepland_2.Components.InventoryViewerComponent></Quepland_2.Components.InventoryViewerComponent>

    </div>
    </div>


@code {

    private void Unequip(GameItem item)
    {
        Player.Instance.Unequip(item);
        TooltipManager.HideTip();
        GameState.UpdateState();
    }
    private GameItem GetItemAtSlot(string slot)
    {
        foreach(GameItem i in Player.Instance.GetEquippedItems())
        {
            if(i.EquipSlot == slot)
            {
                return i;
            }
        }
        return null;
    }
    private bool ShouldRerender(string slot)
    {       
        foreach (GameItem i in Player.Instance.GetEquippedItems())
        {
            if (i.EquipSlot == slot)
            {
                return i.Rerender;
            }
        }
        return true;
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
