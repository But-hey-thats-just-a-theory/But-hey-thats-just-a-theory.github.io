@inject GameState GameState
@implements IDisposable

@if (GameState.CurrentRecipe != null)
{
    <div style="height:60px;"><button @onclick="@(() => Stop())">Stop Crafting @GameState.CurrentRecipe.OutputItemName</button></div>
}
else
{
    <div style="height:60px"></div>
}
<div style="display:flex;flex-wrap:wrap;width:280px;border:solid black 1px;border-radius:0.25rem;background-color:dimgray;min-height:50px;">
    @foreach (Recipe recipe in ItemManager.Instance.Recipes)
    {
        if (recipe.CanCreate())
        {
            <div onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, recipe.OutputAmount + " " + recipe.Output.Name, recipe.GetIngredientsString())))" @onclick="@(() => GameState.SetCraftingItem(recipe))"><ItemBoxComponent Item="@recipe.Output"></ItemBoxComponent></div>
        }
        else if (recipe.HasSomeIngredients())
        {
            if (recipe.HasSpace())
            {
                <div style="opacity:0.5" onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, recipe.Output.Name, recipe.GetMissingIngredients())))"
                     onmouseout="@(new Action(() => GameState.HideTooltip()))"><ItemBoxComponent Item="@recipe.Output"></ItemBoxComponent></div>
            }
            else
            {
                <div style="opacity:0.5" onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, recipe.Output.Name, "You don't have the inventory space to make this.")))"
                     onmouseout="@(new Action(() => GameState.HideTooltip()))"><ItemBoxComponent Item="@recipe.Output"></ItemBoxComponent></div>
            }

        }
    }
</div>


@code {

    private void Stop()
    {
        GameState.StopActions();
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
