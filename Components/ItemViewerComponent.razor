@inject GameState GameState
@implements IDisposable
@inject NavigationManager UriHelper

    <div style="        height: 130px;
        min-height:130px;
        width: 350px;
        border: solid black 1px;
        padding: 5px;
        margin: 5px;
        position:relative;
">
        @if (Item != null && !HideValue)
        {
            <div>@Item.Name</div>
            <div style="position:absolute;top:30px;line-height:18px;">@Item.Description</div>
            @if ((Item.WeaponInfo != null || Item.ArmorInfo != null) && Item.EquipSlot != "None")
            {
                if (Item.IsEquipped)
                {
                    <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Unequip())">Unequip</button></div>

                }
                else if (Item.HasRequirements())
                {
                    <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Equip())">Equip</button></div>

                }
                else if (Item.ArmorInfo != null && Item.HasArmorRequirements())
                {
                    <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Equip())">Equip</button></div>
                }
                else if (Item.WeaponInfo != null && Item.HasWeaponRequirements())
                {
                    <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => Equip())">Equip</button></div>
                }
                else
                {
                    <div class="item-view-button">
                        <button class="btn btn-light" style="opacity:0.5"
                                onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, Item.GetRequirementTooltip())))"
                                onmouseout="@(new Action(() => GameState.HideTooltip()))">
                            Equip
                        </button>
                    </div>

                }

            }
            @if (Item.FoodInfo != null)
            {
                <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => EatItem())">Eat</button></div>
            }
            @if (ItemManager.Instance.GetUnpackingRecipe(Item) != null)
            {
                if (ItemManager.Instance.GetUnpackingRecipe(Item).HasSpace())
                {
                    <div class="item-view-button"><button class="btn btn-light" @onclick="@(() => GameState.SetCraftingItem(ItemManager.Instance.GetUnpackingRecipe(Item)))">@ItemManager.Instance.GetUnpackingRecipe(Item).RecipeButtonString</button></div>

                }
                else
                {
                    <div class="item-view-button">
                        <button class="btn btn-light" style="opacity:0.7" onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "You don't have enough inventory space.")))"
                                onmouseout="@(new Action(() => GameState.HideTooltip()))">
                            @ItemManager.Instance.GetUnpackingRecipe(Item).RecipeButtonString
                        </button>
                    </div>

                }
            }
            if (ItemManager.Instance.CurrentShop != null)
            {
                @if (Item.IsSellable)
                {
                    <button style="position:absolute;left:5px;bottom:5px;" class="btn btn-light" @onclick="@(() => SellItem())">Sell @(Math.Min(ItemManager.Instance.SellAmount, Player.Instance.Inventory.GetNumberOfItem(Item)))</button> @((Item.Value / 2 * Math.Min(ItemManager.Instance.SellAmount, Player.Instance.Inventory.GetNumberOfItem(Item))) + " " + ItemManager.Instance.CurrentShop.CurrencyName)

                }
            }
            @if (Bank.Instance.IsBanking)
            {
                <button class="btn btn-light" style="position:absolute;left:5px;bottom:5px;" onclick="@(new Action<MouseEventArgs>((args) => BankItem()))">Deposit @Bank.Instance.GetAmountString()</button>

            }
        }
    </div>


@code {
    [Parameter]
    public GameItem Item { get; set; }
    private bool HideValue;

    private void SellItem()
    {
        if(Item.IsSellable == false)
        {
            MessageManager.AddMessage("You can't seem to sell this...");
            return;
        }
        if (Item.IsEquipped)
        {
            MessageManager.AddMessage("You need to unequip this item before selling it.");
            return;
        }
        if(ItemManager.Instance.CurrentShop != null)
        {
            int sellAmt = Math.Min(ItemManager.Instance.SellAmount, Player.Instance.Inventory.GetNumberOfItem(Item));
            if(Player.Instance.Inventory.GetAvailableSpaces() > 0 || Player.Instance.Inventory.GetNumberOfItem(ItemManager.Instance.CurrentShop.Currency) > 0 || (Item.IsStackable == false))
            {
                Player.Instance.Inventory.RemoveItems(Item, sellAmt);
                Player.Instance.Inventory.AddMultipleOfItem(ItemManager.Instance.CurrentShop.Currency, (sellAmt * Item.Value / 2));
                MessageManager.AddMessage("You sold " + sellAmt + " " + Item.Name + " for " + (sellAmt * Item.Value / 2) + " " + ItemManager.Instance.CurrentShop.Currency.Name + ".");

                ClearItem();
            }
            else
            {
                Console.WriteLine("No inventory space.");
            }
        }
        else
        {
            Console.WriteLine("Shop was null");
        }
    }
    private void EatItem()
    {
        GameState.Eat(Item);
        if (Player.Instance.Inventory.GetNumberOfItem(Item) == 0)
        {
            GameState.inventoryViewer.SelectedItem = null;
            ClearItem();
        }
        GameState.UpdateState();
    }
    private void BankItem()
    {
        Bank.Instance.Deposit(Item);
        if(Player.Instance.Inventory.GetNumberOfItem(Item) == 0)
        {
            GameState.inventoryViewer.SelectedItem = null;
            ClearItem();
        }
        GameState.UpdateState();
    }
    private void Equip()
    {
        Item.Rerender = true;
        Player.Instance.Equip(Item);
        GameState.UpdateState();
    }
    private void Unequip()
    {
        Item.Rerender = true;
        Player.Instance.Unequip(Item);

        GameState.UpdateState();
    }
    public void ClearItem()
    {

        Item = null;
        HideValue = true;
        StateHasChanged();
    }
    public void ShowItem()
    {
        HideValue = false;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        GameState.itemViewer = this;
        HideValue = false;
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}

