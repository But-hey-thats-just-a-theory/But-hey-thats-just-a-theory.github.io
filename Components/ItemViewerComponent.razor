@inject GameState GameState
@implements IDisposable
    <div style="        height: 130px;
        width: 290px;
        border: solid black 1px;
        padding: 5px;
        margin: 5px;
        position:relative;
">
        @if (Item != null)
        {
            <div>@Item.Name</div>
            <div>@Item.Description</div>
            @if (Item.WeaponInfo != null || Item.ArmorInfo != null)
            {
                if (Item.IsEquipped)
                {
                    <div style="float:right;position:relative;bottom:35px;"><button @onclick="@(() => Player.Instance.UnequipItem(Item))">Unequip</button></div>

                }
                else
                {
                    <div style="float:right;position:relative;bottom:35px;"><button @onclick="@(() => Player.Instance.Equip(Item))">Equip</button></div>

                }

            }
            if (ItemManager.Instance.CurrentShop != null)
            {
                <div><button @onclick="@(() => SellItem())">Sell</button> Value:@(Item.Value / 2) </div>
            }
        }
    </div>


@code {
    [Parameter]
    public GameItem Item { get; set; }

    private void SellItem()
    {
        if(ItemManager.Instance.CurrentShop != null)
        {
            int sellAmt = Math.Min(ItemManager.Instance.SellAmount, Player.Instance.Inventory.GetNumberOfItem(Item));
            if(Player.Instance.Inventory.GetAvailableSpaces() > 0 || Player.Instance.Inventory.GetNumberOfItem(ItemManager.Instance.CurrentShop.Currency) > 0)
            {
                Player.Instance.Inventory.RemoveItems(Item, sellAmt);
                Player.Instance.Inventory.AddMultipleOfItem(ItemManager.Instance.CurrentShop.Currency, (sellAmt * Item.Value / 2));
                MessageManager.AddMessage("You sold " + sellAmt + " " + Item.Name + " for " + (sellAmt * Item.Value) + " " + ItemManager.Instance.CurrentShop.Currency.Name + ".");
            }
            else
            {
                Console.WriteLine("No inventory space.");
            }
        }
        else
        {
            Console.WriteLine("Shop was null");
        }
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}

