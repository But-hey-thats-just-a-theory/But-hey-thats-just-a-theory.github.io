@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable

@if (NPCs != null)
{
    <div style="
        position: fixed;
        bottom: 215px;
        border-radius: 0.5rem;
        border: solid 1px black;
        padding: 5px;
        margin: 5px;
        background: bisque;
        margin-left:-20px;
        width:575px;
">
        <div style="display:flex;">
            @foreach (string npcName in NPCs)
            {

                if (npcName == ActiveName)
                {
                    <div style="border-top: solid black 1px; border-top-right-radius: 0.5rem; border-right: solid black 1px;background-color:darkgoldenrod;padding:5px;">
                        @npcName
                    </div>
                }
                else
                {
                    <div style="border-top: solid black 1px; border-top-right-radius: 0.5rem; border-right: solid black 1px;cursor:pointer;padding:5px;"
                         @onclick="@(() => ChooseNPC(npcName))">
                        @npcName
                    </div>
                }

            }
        </div>

        <NPCDialogComponent npc="@ActiveName"></NPCDialogComponent>
    </div>
}



@code {
    [Parameter]
    public List<string> NPCs { get; set; }
    public string ActiveName { get; set; }

    public void ChooseNPC(string name)
    {
        ActiveName = name;
        GameState.UpdateState();
        Console.WriteLine("Choosing:" + name + ", now active name is:" + ActiveName);
    }

    protected override void OnInitialized()
    {
        if (NPCs != null && NPCs.Count > 0)
        {
            ActiveName = NPCs[0];
            Console.WriteLine("Parameters Set:" + ActiveName);
        }
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
