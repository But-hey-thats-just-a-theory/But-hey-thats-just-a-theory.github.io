@page "/World/Battle/"
@inject GameState GameState
@implements IDisposable

@if (BattleManager.Instance.CurrentOpponent != null)
{<div style="width:590px;height:500px;">
    <div>
        @BattleManager.Instance.CurrentOpponent.Name
        <div>
            @BattleManager.Instance.CurrentOpponent.CurrentHP / @BattleManager.Instance.CurrentOpponent.HP
        </div>
        <div class="progress" style="width:120px;height:40px;font-size:large;position:relative">
            <div style="position:absolute;margin-Left:35px;line-height:40px;color:black">Attack</div>
            <div class="progress-bar" style="width:@(GetOpponentAttackProgress());background-color:mediumpurple">

            </div>
        </div>
        <div class="progress" style="width:550px;margin-top:10px;">
            <div class="progress-bar" style="width:@(BattleManager.Instance.CurrentOpponent.GetRemainingHPPercent())%;">

            </div>
        </div>
    </div>
    <div>
        You
        <div>
            @Player.Instance.CurrentHP / @Player.Instance.MaxHP
        </div>
        <div class="progress" style="width:550px;margin-top:10px;">
            <div class="progress-bar" style="width:@(GetPlayerHPPercent());">

            </div>
        </div>
        <div class="progress" style="width:120px;height:40px;font-size:large;position:relative;margin-top:10px;">

                <div style="position:absolute;margin-Left:35px;line-height:40px;color:black">Attack</div>
            

            <div class="progress-bar" style="width:@(GetPlayerAttackProgress());background-color:mediumpurple">
            </div>
        </div>
    </div>
</div>
}


@code {

    private string GetPlayerHPPercent()
    {
        return (((double)Player.Instance.CurrentHP / Player.Instance.MaxHP) * 100d) + "%";
    }
    private string GetOpponentAttackProgress()
    {
        return (100 - (((double)BattleManager.Instance.CurrentOpponent.TicksToNextAttack / BattleManager.Instance.CurrentOpponent.AttackSpeed) * 100d)) + "%";
    }
    private string GetPlayerAttackProgress()
    {
        return (100 - (((double)Player.Instance.TicksToNextAttack / Player.Instance.GetWeaponAttackSpeed()) * 100d)) + "%";
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
