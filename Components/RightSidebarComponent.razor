@inject GameState GameState
@implements IDisposable
<div style="display:flex;">
    <button onclick="@(new Action(() => ChangeView("Inventory")))">Inv</button>
    <button onclick="@(new Action(() => ChangeView("Skills")))">Skill</button>
    <button onclick="@(new Action(() => ChangeView("Quests")))">Quests</button>
    <button onclick="@(new Action(() => ChangeView("Crafting")))">Crafting</button>
    <button onclick="@(new Action(() => ChangeView("Followers")))">Followers</button>
</div>
@if (activeWindow == "Inventory")
{
    <InventoryViewerComponent></InventoryViewerComponent>
}
else if (activeWindow == "Skills")
{
    <SkillsComponent></SkillsComponent>
}
else if (activeWindow == "Quests")
{
    <QuestsComponent></QuestsComponent>
}
else if (activeWindow == "Crafting")
{
    <CraftingComponent></CraftingComponent>
}
else if (activeWindow == "Followers")
{
    <FollowerComponent></FollowerComponent>
}
@code {
    private string activeWindow = "Inventory";

    public void ChangeView(string view)
    {
        activeWindow = view;
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
