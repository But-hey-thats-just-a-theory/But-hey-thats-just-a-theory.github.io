@page "/"
@inject GameState GameState
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (GameState.ShowStartMenu)
{
    @if (GameState.InitCompleted == false)
    {
        <div>Loading Data...</div>
    }
    <StartMenuComponent></StartMenuComponent>
    <button @onclick="@(() => Test())">Smith</button>
    <button @onclick="@(() => Rates())">Rates</button>
    <button @onclick="@(() => Quests())">Quest Manager</button>
    <button @onclick="@(() => TestMethods())">Run Tests</button>
}
else
{

}

@code{

    protected async override Task OnInitializedAsync()
    {
        if (GameState.InitCompleted == false)
        {
            await GameState.LoadData(Http, UriHelper, JSRuntime);

        }
        //Player.Instance.GainExperience("Strength:1000000000");
        Player.Instance.GainExperience("Woodcutting:1000");
        //Player.Instance.Inventory.AddItem("Shuniku Berries");
        //Player.Instance.Inventory.AddItem("Wood Carving Knife");
        //Player.Instance.Inventory.AddMultipleOfItem("Coins", 1500000);
        Player.Instance.Inventory.AddItem("Rabbit Hide");
        Player.Instance.Inventory.AddItem("Deer Hide");
        //Player.Instance.Inventory.AddItem("Buck");
        Player.Instance.Inventory.AddItem("Small Fishing Rod");
        Player.Instance.Inventory.AddItem("Moose Hide");
        //Player.Instance.Inventory.AddItem("Grizzly Bear");
        Player.Instance.Inventory.AddMultipleOfItem("Fishing Bait", 3000);
        //Player.Instance.Inventory.AddItem("Rooster Plumage");
        //Player.Instance.Inventory.AddItem("Rice");
        //Player.Instance.Inventory.AddItem("Ultimate Test Weapon");
        //AreaManager.Instance.GetAreaByName("Queple Cave Smithy").Unlock();
        Player.Instance.CurrentFollower = FollowerManager.Instance.Followers[0];
        int it = 0;
        foreach (GameItem item in ItemManager.Instance.Items)
        {
            if(it < 15 || item.Name == "Feather")
            {
                Bank.Instance.Inventory.AddItem(item);
                it++;
            }

        }

        Player.Instance.CurrentHP = 50;
        Bank.Instance.Inventory.AddItem("Stone Axe");

        GameState.StateChanged += OnGameStateChanged;
    }
    private void Rates()
    {
        UriHelper.NavigateTo("/Rates/");
    }
    private void Quests()
    {
        UriHelper.NavigateTo("/QuestManagement/");
    }
    private void Test()
    {

        GameState.Location = "Smithy";
        UriHelper.NavigateTo("World/Smithy/");
    }
    private void TestMethods()
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();
        List<KeyValuePair<GameItem, int>> items = Bank.Instance.Inventory.GetItems().OrderBy(x => x.Key.ID).ToList();
        watch.Stop();
        Console.WriteLine("Get items + orderby:" + watch.ElapsedMilliseconds);
        watch = System.Diagnostics.Stopwatch.StartNew();
        List<KeyValuePair<GameItem, int>> noOrderItems = Bank.Instance.Inventory.GetItems();
        watch.Stop();
        Console.WriteLine("Get items:" + watch.ElapsedMilliseconds);
    }

    public void Dispose()
    {

        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
