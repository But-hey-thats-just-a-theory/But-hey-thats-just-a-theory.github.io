@page "/World/{areaURL}"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable


@if (thisArea != null)
{
    <h1>@thisArea.Name</h1>
    <p>@thisArea.Description</p>

    @foreach (string a in thisArea.Actions ?? Enumerable.Empty<string>())
    {
        if (a == "Smithy")
        {
            <button class="btn btn-outline-dark" @onclick="(() => EnterSmithy())">Smith</button>
            <br />
        }
        else
        {
            <Quepland_2.Components.GatherButtonComponent ActionText="@a"></Quepland_2.Components.GatherButtonComponent>
            <br />
        }

    }
    @foreach (Building b in thisArea.Buildings)
    {
        <div>
            <button class="btn btn-success" @onclick="@(() => EnterBuilding(b.URL))">@b.ButtonText</button>
        </div>

        <br />
    }
    @foreach (AreaUnlock a in thisArea.UnlockableAreas)
    {
        if (AreaManager.Instance.GetAreaByURL(a.AreaURL).IsUnlocked == false)
        {
            <Quepland_2.Components.AreaUnlockComponent areaToUnlock="@a"></Quepland_2.Components.AreaUnlockComponent>
            <br />
        }
    }
    @if (thisArea.NPCs.Count > 0)
    {
        @foreach (string npc in thisArea.NPCs)
        {
            <Quepland_2.Components.NPCDialogComponent npc="@npc"></Quepland_2.Components.NPCDialogComponent>

        }

    }
    @if (thisArea.DungeonName != null)
    {
        <button class="btn btn-dark" @onclick="@(() => EnterDungeon(thisArea.Dungeon.URL))">Enter @thisArea.Dungeon.Name</button>
        <br />
    }
    @if (thisArea.Monsters != null && thisArea.Monsters.Count > 0)
    {
        <button class="btn btn-outline-dark" @onclick="@(e => FindBattles())">Battle</button>
    }

}

@code {

    [Parameter]
    public string areaURL { get; set; }
    public Area thisArea { get; set; }

    private void FindBattles()
    {
        GameState.StopNonCombatActions();
        BattleManager.Instance.StartBattle(thisArea);
        GameState.Location = "Battle";
        UriHelper.NavigateTo("World/Battle/");
    }

    private void EnterBuilding(string buildingURL)
    {
        GameState.StopActions();
        GameState.Location = areaURL + "/" + buildingURL;
        UriHelper.NavigateTo("World/" + areaURL + "/" + buildingURL);
    }
    private void EnterDungeon(string dungeonURL)
    {
        GameState.StopActions();
        GameState.Location = dungeonURL;
        UriHelper.NavigateTo("Underworld/" + dungeonURL);
    }
    private void EnterSmithy()
    {
        GameState.StopActions();
        GameState.Location = "Smithy/" + areaURL;
        UriHelper.NavigateTo("World/Smithy/" + areaURL);
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        thisArea = AreaManager.Instance.GetAreaByURL(areaURL);
        GameState.NavMenu.ChangeOpenRegion(AreaManager.Instance.GetRegionForArea(thisArea), false);
        GameState.UpdateState();
        
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
