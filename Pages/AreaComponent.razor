@page "/World/{areaName}"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable


@if (thisArea != null)
{
    <div>Welcome to @thisArea.Name</div>
    <p>@thisArea.Description</p>

    @foreach (string a in thisArea.Actions ?? Enumerable.Empty<string>())
    {
        <Quepland_2.Components.GatherButtonComponent ActionText="@a"></Quepland_2.Components.GatherButtonComponent>
    }
    @foreach (Building b in thisArea.Buildings)
    {
        <button @onclick="@(() => EnterBuilding(b.URL))">@b.ButtonText</button>
    }
    @foreach (AreaUnlock a in thisArea.UnlockableAreas)
    {
        if (AreaManager.Instance.GetAreaByURL(a.AreaURL).IsUnlocked == false)
        {
            if (a.HasRequirements())
            {
                <button @onclick="(() => GoToArea(a.AreaURL))">@a.ButtonText</button>
            }
            else
            {
                <button onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, a.ToString())))"
                        onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    @a.ButtonText
                </button>
            }
        }
    }
    @foreach (string npc in thisArea.NPCs)
    {
        <div style="border:solid 1px black;padding:5px;">

            @npc
            @foreach (Dialog d in NPCManager.Instance.GetNPCByName(npc).Dialogs)
            {
                @if (d.HasRequirements())
                {
                    <button @onclick="@(() => Talk(d))">@d.ButtonText</button>
                }

            }
        </div>
        @if (thisArea.DungeonName != null)
        {
            <button @onclick="@(() => EnterDungeon(thisArea.Dungeon.URL))">Enter @thisArea.Dungeon.Name</button>
        }
        @if (thisArea.Monsters != null && thisArea.Monsters.Count > 0)
        {
            <button @onclick="@(e => FindBattles())">Battle</button>
        }
    }
}

@code {

    [Parameter]
    public string areaName { get; set; }
    public Area thisArea { get; set; }

    private void GetAxe()
    {
        Player.Instance.Inventory.AddItem(ItemManager.Instance.GetItemByName("Stone Axe"));
        GameState.UpdateState();
    }
    private void FindBattles()
    {
        GameState.StopActions();
        BattleManager.Instance.StartBattle(thisArea);
        GameState.Location = "Battle";
        UriHelper.NavigateTo("World/Battle/");
    }
    private void GoToArea(string url)
    {
        GameState.StopActions();
        GameState.Location = url;
        Area a = AreaManager.Instance.GetAreaByURL(url);
        a.Unlock();
        UriHelper.NavigateTo("World/" + url);
    }
    private void EnterBuilding(string buildingURL)
    {
        GameState.StopActions();
        GameState.Location = areaName + "/" + buildingURL;
        UriHelper.NavigateTo("World/" + areaName + "/" + buildingURL);
    }
    private void EnterDungeon(string dungeonURL)
    {
        GameState.StopActions();
        GameState.Location = dungeonURL;
        UriHelper.NavigateTo("Underworld/" + dungeonURL);
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        thisArea = AreaManager.Instance.GetAreaByURL(areaName);

        GameState.UpdateState();
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
