@page "/World/{areaName}"
@inject GameState GameState
@inject NavigationManager UriHelper

@if (thisArea != null)
{
    <div>Welcome to @thisArea.Name</div>
    <p>@thisArea.Description</p>

    @foreach (string a in thisArea.Actions ?? Enumerable.Empty<string>())
    {
        <Quepland_2.Components.GatherButtonComponent ActionText="@a"></Quepland_2.Components.GatherButtonComponent>
    }
    @foreach(Building b in thisArea.Buildings)
    {
        <button @onclick="@(() => EnterBuilding(b.URL))">@b.ButtonText</button>
    }
    @foreach(AreaUnlock a in thisArea.UnlockableAreas)
    {
        if (a.HasRequirements())
        {
            <button @onclick="(() => GoToArea(a.AreaURL))">@a.ButtonText</button>
        }
        else
        {
            <button>@a.ButtonText</button>
        }

    }
}
<button @onclick="@(e => GetAxe())">Get Axe</button>

@code {
    [Parameter]
    public string areaName { get; set; }
    public Area thisArea { get; set; }

    private void GetAxe()
    {
        Player.Instance.Inventory.AddItem(ItemManager.Instance.GetItemByName("Stone Axe"));
        GameState.UpdateState();
    }
    private void GoToArea(string url)
    {
        GameState.StopActions();
        GameState.Location = url;
        AreaManager.Instance.GetAreaByURL(url).IsUnlocked = true;
        UriHelper.NavigateTo("World/" + url);
    }
    private void EnterBuilding(string buildingURL)
    {
        GameState.StopActions();
        GameState.Location = areaName + "/" + buildingURL;
        UriHelper.NavigateTo("World/" + areaName + "/" + buildingURL);
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        thisArea = AreaManager.Instance.GetAreaByURL(areaName);
        GameState.UpdateState();
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
