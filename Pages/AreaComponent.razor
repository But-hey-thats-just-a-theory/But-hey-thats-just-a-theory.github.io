@page "/World/{areaName}"
@inject GameState GameState
@inject NavigationManager UriHelper

@if (thisArea != null)
{
    <div>Welcome to @thisArea.Name</div>
    <p>@thisArea.Description</p>

    @foreach (string a in thisArea.Actions ?? Enumerable.Empty<string>())
    {
        if (GameState.CurrentGatherItem != null && a.Split(':')[1] == GameState.CurrentGatherItem.Name)
        {
            <button onclick="@(new Action(() => GatherItem(null)))">Stop Gathering</button>

        }
        else
        {
            if (Player.Instance.HasSkillRequirement(a.Split(':')[1]))
            {
                <button onclick="@(new Action(() => GatherItem(a.Split(':')[1])))">@a.Split(':')[0]</button>
            }
            else
            {
                <button style="background-color:gray;color:darkgray;"
                 onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, GetRequirementTooltip(a.Split(':')[1]))))"
                 onmouseout="@(new Action(() => GameState.HideTooltip()))">@a.Split(':')[0]</button>
            }

        }
    }
}

@code {
    [Parameter]
    public string areaName { get; set; }
    public Area thisArea { get; set; }

    public void GatherItem(string itemName)
    {
        if (itemName == null)
        {
            GameState.CurrentGatherItem = null;
            GameState.UpdateState();
            return;
        }
        GameState.CurrentGatherItem = ItemManager.Instance.GetItemByName(itemName);
        GameState.TicksToNextGather = GameState.CurrentGatherItem.GatherSpeed.ToGaussianRandom();
        GameState.UpdateState();
    }
    public string GetRequirementTooltip(string itemName)
    {
        if (itemName == null)
        {
            return "";
        }
        GameItem item = ItemManager.Instance.GetItemByName(itemName);
        if (item == null)
        {
            return "";
        }
        if (Player.Instance.HasSkillRequirement(item) == false)
        {
            return "You need " + item.RequiredLevel + " " + item.RequiredSkill + " to do this.";
        }
        return item.RequiredSkill;
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    protected override void OnParametersSet()
    {
        thisArea = AreaManager.Instance.GetAreaByURL(areaName);
        GameState.UpdateState();
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
