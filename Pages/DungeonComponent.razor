@page "/Underworld/{DungeonURL}"
@inject GameState GameState
@inject NavigationManager UriHelper
@implements IDisposable


@if (Dungeon != null)
{
    <div style="margin-top:20px;">


        @if (Dungeon.Progress < 100)
        {
            <div style="margin-bottom:5px;">
                Progress
                <div class="progress" onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, "Progress", "You've explored " + Dungeon.GetPercentProgress() + "% of this dungeon.")))"
                                      onmouseout="@(new Action(() => GameState.HideTooltip()))">
                    <div class="progress-bar" style="width:@(Dungeon.GetPercentProgress())%"></div>
                </div>
            </div>

            if (IsFighting == false)
            {
                <button class="btn btn-success" @onclick="@(() => Spelunk())">Spelunk</button>
            }
            else
            {
                <div style="height:38px;"></div>
            }

        }
        @if (IsFighting)
        {
            <CombatComponent></CombatComponent>
            @if (BattleManager.Instance.AllOpponentsDefeated() && BattleManager.Instance.BattleHasEnded)
            {
                <div style="position:fixed;bottom:280px;">
                    <button class="btn btn-success" @onclick="@(() => Spelunk())">Continue Spelunking</button>
                    <br />
                    <br/>
                    <button class="btn btn-secondary" @onclick="@(() => EndFight())">Return</button>
                </div>

            }
        }
        else
        {

            <div style="margin-top:10px;">
                Enter:
                <br/>
                @foreach (Area area in Dungeon.GetUnlockedAreas() ?? Enumerable.Empty<Area>())
                {
                    <button class="btn btn-primary" @onclick="@(() => GoToArea(area.AreaURL))">@area.Name</button>
                    <br />
                }
            </div>
        }
    </div>
}


@code {
    [Parameter]
    public string DungeonURL { get; set; }
    public Dungeon Dungeon { get; set; }
    private static Random rand = new Random();
    private bool IsFighting;

    public void Spelunk()
    {
        IsFighting = false;
        int action = rand.Next(0, (int)(Dungeon.Size - Dungeon.Progress));
        if (Dungeon.GetLockedAreas().Count > action)
        {
            Area areaToUnlock = Dungeon.GetRandomLockedArea();
            if (areaToUnlock != null)
            {
                areaToUnlock.Unlock();
                MessageManager.AddMessage("While spelunking you discovered a new area:" + areaToUnlock.Name);
            }
        }
        else
        {
            Monster monsterToFight = Dungeon.GetRandomMonster();
            if (monsterToFight != null)
            {
                BattleManager.Instance.CurrentOpponents.Clear();
                BattleManager.Instance.CurrentOpponents.Add(monsterToFight);
                BattleManager.Instance.StartBattle();
                IsFighting = true;
            }
        }
        Dungeon.Progress++;
        GameState.UpdateState();
    }
    private void EndFight()
    {
        IsFighting = false;
        GameState.UpdateState();
    }
    private void GoToArea(string areaURL)
    {
        GameState.StopActions();
        GameState.Location = areaURL;

        UriHelper.NavigateTo("World/" + areaURL);
    }
    protected override void OnParametersSet()
    {
        Dungeon = AreaManager.Instance.Dungeons.FirstOrDefault(x => x.URL == DungeonURL);
        BattleManager.Instance.CurrentArea = null;
        GameState.UpdateState();
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
