@page "/World/Smithy/{Location}"
@inject GameState GameState
@using Quepland_2.Components
@implements IDisposable

@if (Location != null)
{
    <h3>Smithy</h3>

    <CustomDropdownComponent BoxText="Select an Ore" EmptyText="You don't have any ores or bars." @bind-Value="Source" DropdownItems="@GetSmeltables()"></CustomDropdownComponent>

    <CustomDropdownComponent BoxText="Select a Product" EmptyText="Please select a source." @bind-Value="Product" DropdownItems="@GetSmithables()"></CustomDropdownComponent>


    <br />

    @if (Product != "" && Source != "" && Player.Instance.Inventory.HasItem(ItemManager.Instance.GetItemByName(Source)))
    {
        <button class="btn btn-primary" @onclick="@(() => Smith())">Smith a @Product @amount Times</button>
    }
    <br />
    <br/>
    <div>
        <div class="progress" style="width:300px;">
            <div class="progress-bar" style="@GetProgress()"></div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Location { get; set; }
    string Source = "";
    string Product = "";
    int amount = 1;
    GameItem ItemToCreate { get; set; }
    private List<GameItem> smeltables = new List<GameItem>();
    private List<GameItem> smithables = new List<GameItem>();

    public List<string> GetSmithables()
    {
        if(smithables.Count > 0)
        {
            return smithables.Select(x => x.Name).ToList();
        }
        return new List<string>();
    }
    public List<string> GetSmeltables()
    {
        if (smeltables.Count > 0)
        {
            return smeltables.Select(x => x.Name).ToList();
        }
        return new List<string>();
    }
    public void Smith()
    {
        GameItem source = ItemManager.Instance.GetItemByName(Source);
        GameItem product = ItemManager.Instance.GetItemByName(Product);

        if (Player.Instance.Inventory.HasItem(source))
        {
            GameState.StopActions();
            GameState.SmithingStage = 0;
            GameState.NewSmeltingItem = source;
            GameState.NewSmithingItem = product;
            Console.WriteLine("Source:"+(source != null) + ", Product:" + (product != null));
            MessageManager.AddMessage("You begin smithing your " + Source + " into a " + Product);
            GameState.TicksToNextAction = source.SmithingInfo.SmeltingSpeed;
        }
    }
    private string GetProgress()
    {
        if (GameState.CurrentSmeltingItem != null)
        {
            if (GameState.SmithingStage == 0)
            {
                return "width:" + (100 - ((double)GameState.TicksToNextAction / GameState.CurrentSmeltingItem.SmithingInfo.SmeltingSpeed) * 100d) + "%";
            }
            else
            {
                return "width:" + (100 - ((double)GameState.TicksToNextAction / GameState.CurrentSmeltingItem.SmithingInfo.SmithingSpeed) * 100d) + "%";
            }
        }
        return "width:0%";
    }

    protected override void OnInitialized()
    {
        Smithy s = AreaManager.Instance.Smithies.FirstOrDefault(x => x.Location == Location);


        foreach(GameItem i in s.SmithableMetals)
        {
            if (Player.Instance.Inventory.HasItem(i))
            {
                smeltables.Add(i);
                foreach (GameItem output in i.SmithingInfo.SmithsInto)
                {
                    if (output != null)
                    {
                        if (Player.Instance.Inventory.HasItem(i))
                        {
                            smithables.Add(output);
                        }

                    }

                }
            }
        }
        if(smithables.Count == 0)
        {

        }
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
