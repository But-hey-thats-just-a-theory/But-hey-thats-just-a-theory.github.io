@inject NavigationManager UriHelper
@inject GameState GameState

<div class="top-row pl-4 navbar navbar-light">
    <div style="color:white;font-size:larger">Quepland 2 (@GameState.Version)</div>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <span style="color:black;cursor:pointer;font-size:large;" onclick="@(new Action(() => GoToArea("Bank")))"><img style="height: 45px; width: 45px; padding: 5px; margin-right: 10px; border-radius: 0.25rem; background-color: white;" src="@("data/Images/Bank.png")" />Bank</span>

        </li>
        @foreach (Region region in AreaManager.Instance.GetLandByName(GameState.CurrentLand.Name).Regions)
        {
            if (region.IsUnlocked)
            {

                    <li class="nav-item px-3" style="background-color:rgba(255, 255, 255, 0.2);cursor:pointer;" @onclick="@(() => ChangeOpenRegion(region))">
                        <span style="color:black;font-size:large;display:inline-block;padding-top:10px;" >@region.Name  </span><img style="height:25px;width:25px;float:right;margin-top:11px;" src="data/Images/Hamburger.png" />
                    </li>
                
                @if (region == openRegionMenu)
                {
                    foreach (Area a in region.Areas)
                    {
                        if (a.IsUnlocked && a.IsHidden == false)
                        {
                            <li class="nav-item px-3" style="position:relative"
                                onmouseover="@(new Action<MouseEventArgs>(e => GameState.ShowTooltip(e, a.Name, GetAreaInfo(a))))"
                                onmouseout="@(new Action(() => GameState.HideTooltip()))">
                                <span style="color:black;cursor:pointer;font-size:large;" onclick="@(new Action(() => GoToArea(a.AreaURL)))"><img style="height:45px;width:45px;padding:5px;margin-right:10px;margin-top:3px;border-radius:0.25rem;background-color:white;" src="@("data/Images/" + a.Image + ".png")" />@a.Name @if(a.HasUnlockableAreas()){<div style="margin:5px;background-color:sandybrown;border-radius:0.5rem;height:12px;width:12px;position:absolute;top:15px;right:10px;"></div>}</span>
                            </li>
                        }
                    }
                }
            }

        }
    </ul>
</div>

@code {

    private bool collapseNavMenu = true;
    private Region openRegionMenu;

    public void ChangeOpenRegion(Region newRegion)
    {
        if(openRegionMenu == newRegion)
        {
            openRegionMenu = null;
        }
        else
        {
            openRegionMenu = newRegion;
        }

        GameState.UpdateState();
    }

    public void GoToArea(string name)
    {
        GameState.StopActions();
        GameState.Location = name;
        UriHelper.NavigateTo("World/" + name + "/");
        GameState.UpdateState();
    }

    private string GetAreaInfo(Area area)
    {
        string info = "";
        foreach(string NPC in area.NPCs)
        {
            info += NPC + "\n";
        }
        if(area.NPCs.Count > 0)
        {
            info += "\n";
        }

        foreach(Building building in area.Buildings)
        {
            info += building.Name + "\n";
        }
        if(area.Buildings.Count > 0)
        {
            info += "\n";
        }

        foreach(string action in area.Actions)
        {
            if (action.Contains(':'))
            {
                info += action.Split(':')[1] + "\n";
            }
            else
            {
                info += action + "\n";
            }

        }
        return info;
    }
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override void OnInitialized()
    {
        GameState.StateChanged += OnGameStateChanged;
    }
    public void Dispose()
    {
        GameState.StateChanged -= OnGameStateChanged;
    }
    void OnGameStateChanged(object sender, EventArgs e) => StateHasChanged();
}
